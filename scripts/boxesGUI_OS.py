"""
Flame Tracker. This program is designed to track flames or bright objects in videos or images.
Copyright (C) 2020,2021  Luca Carmignani; 2021 Charles Scudiere

This file is part of Flame Tracker.

Flame Tracker is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flame Tracker is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Original Author: Luca Carmignani, PhD
Collaborator/Contributor: Charles Scudiere, PhD
Contact: flameTrackerContact@gmail.com
"""

from flameTracker import *

def previewBox_Mac(self):
    self.setStyleSheet('font: 12pt Helvetica')
    self.setWindowTitle('Flame Tracker (v1.1.1)')
    self.setGeometry(10, 10, 1070, 755)
    #Box to choose video parameters, the widgets are listed below
    parametersBox = QGroupBox('Preview box', self)
    parametersBox.setGeometry(10, 5, 1050, 350)
    #This box changes for each analysis;
    #widgets must be declared in the specific py file
    self.analysisGroupBox = QGroupBox('Analysis box', self)
    self.analysisGroupBox.setGeometry(10, 360, 1050, 390)

    # this text box is only shown at the beginning
    tempBox = QGroupBox(' ', self.analysisGroupBox)
    tempBox.setGeometry(0, 0, 1050, 390)
    introTxt = QLabel('Select the analysis method from -Choose analysis- to activate this panel', tempBox)
    introTxt.setGeometry(100, 100, 600, 100)
    introTxt.setStyleSheet('font: 16pt Helvetica')

    ### parametersBox
    # first column
    x_cln1 = 10
    x_cln2 = 105
    h_lbl = 20
    h_txt = 30
    h_btn = 30
    self.msgLabel = QLabel('Welcome to the Flame Tracker! \n\n Click on the Help button to get started.', parametersBox)
    self.msgLabel.setGeometry(x_cln1, 25, 140, h_lbl + 55)
    self.msgLabel.setStyleSheet('background-color: white')
    self.msgLabel.setWordWrap(True)
    self.helpBtn = QPushButton('Help', parametersBox)
    self.helpBtn.setGeometry(x_cln1 - 5, 105, 150, h_btn)
    self.helpBtn.clicked.connect(self.helpBtn_clicked)
    self.openBtn = QPushButton('Open', parametersBox)
    self.openBtn.setGeometry(x_cln1 - 5, 135, 60, h_btn)
    self.openBtn.clicked.connect(self.openBtn_clicked)
    self.openSelectionBox = QComboBox(parametersBox)
    self.openSelectionBox.setGeometry(x_cln1 + 48, 136, 100, h_btn)
    self.openSelectionBox.addItem('Video')
    self.openSelectionBox.addItem('Image(s)')
    self.openSelectionBox.activated[str].connect(self.openSelection_click)
    self.fNameLbl = QLabel('(file name)', parametersBox)
    self.fNameLbl.setGeometry(x_cln1, 170, 140, h_lbl)
    self.fNameLbl.setStyleSheet('background-color: white')
    vWidthTxt = QLabel('Width (px):', parametersBox)
    vWidthTxt.setGeometry(x_cln1, 195, 70, h_txt)
    self.vWidthLbl = QLabel(parametersBox)
    self.vWidthLbl.setGeometry(x_cln2, 199, 45, h_lbl)
    self.vWidthLbl.setStyleSheet('background-color: white')
    vHeightTxt = QLabel('Height (px):', parametersBox)
    vHeightTxt.setGeometry(x_cln1, 225, 70, h_txt)
    self.vHeightLbl = QLabel(parametersBox)
    self.vHeightLbl.setGeometry(x_cln2, 229, 45, h_lbl)
    self.vHeightLbl.setStyleSheet('background-color: white')
    vFpsTxt = QLabel('Frame rate (fps):', parametersBox)
    vFpsTxt.setGeometry(x_cln1, 255, 90, h_txt)
    self.vFpsLbl = QLabel(parametersBox)
    self.vFpsLbl.setGeometry(x_cln2, 259, 45, h_lbl)
    self.vFpsLbl.setStyleSheet('background-color: white')
    vFramesTxt = QLabel('Frames #:', parametersBox)
    vFramesTxt.setGeometry(x_cln1, 285, 70, h_txt)
    self.vFramesLbl = QLabel(parametersBox)
    self.vFramesLbl.setGeometry(x_cln2, 289, 45, h_lbl)
    self.vFramesLbl.setStyleSheet('background-color: white')
    vDurationTxt = QLabel('Duration (s):', parametersBox)
    vDurationTxt.setGeometry(x_cln1, 315, 70, h_txt)
    self.vDurationLbl = QLabel(parametersBox)
    self.vDurationLbl.setGeometry(x_cln2, 319, 45, h_lbl)
    self.vDurationLbl.setStyleSheet('background-color: white')

    #second column
    x_cln1 = 180
    x_cln2 = 265
    w_cln1 = 80
    w_cln2 = 50
    h_lbl = 22
    clmn2_Txt = QLabel('Video parameters:', parametersBox)
    clmn2_Txt.setGeometry(x_cln1, 20, 120, h_txt)
    self.firstFrameTxt = QLabel('First frame:', parametersBox)
    self.firstFrameTxt.setGeometry(x_cln1, 45, w_cln1, h_txt)
    self.firstFrameIn = QLineEdit(parametersBox)
    self.firstFrameIn.setGeometry(x_cln2, 49, w_cln2, h_lbl)
    self.lastFrameTxt = QLabel('Last frame:', parametersBox)
    self.lastFrameTxt.setGeometry(x_cln1, 75, w_cln1, h_txt)
    self.lastFrameIn = QLineEdit(parametersBox)
    self.lastFrameIn.setGeometry(x_cln2, 79, w_cln2, h_lbl)
    self.skipFrameTxt = QLabel('Skip frames:', parametersBox)
    self.skipFrameTxt.setGeometry(x_cln1, 105, w_cln1, h_txt)
    self.skipFrameIn = QLineEdit(parametersBox)
    self.skipFrameIn.setGeometry(x_cln2, 109, w_cln2, h_lbl)
    self.scaleTxt = QLabel('Scale (px/mm):', parametersBox)
    self.scaleTxt.setGeometry(x_cln1, 135, w_cln1, h_txt)
    self.scaleIn = QLineEdit(parametersBox)
    self.scaleIn.setGeometry(x_cln2, 139, w_cln2, h_lbl)
    self.measureScaleBtn = QPushButton('Measure scale', parametersBox)
    self.measureScaleBtn.setGeometry(x_cln1 - 10, 165, 150, h_btn)
    self.measureScaleBtn.clicked.connect(self.measureScaleBtn_clicked)
    self.roiOneTxt = QLabel('ROI, x:', parametersBox)
    self.roiOneTxt.setGeometry(x_cln1, 195, w_cln1, h_txt)
    self.roiOneIn = QLineEdit(parametersBox)
    self.roiOneIn.setGeometry(x_cln2, 199, w_cln2, h_lbl)
    self.roiTwoTxt = QLabel('ROI, y:', parametersBox)
    self.roiTwoTxt.setGeometry(x_cln1, 225, w_cln1, h_txt)
    self.roiTwoIn = QLineEdit(parametersBox)
    self.roiTwoIn.setGeometry(x_cln2, 229, w_cln2, h_lbl)
    self.roiThreeTxt = QLabel('ROI, w:', parametersBox)
    self.roiThreeTxt.setGeometry(x_cln1, 255, w_cln1, h_txt)
    self.roiThreeIn = QLineEdit(parametersBox)
    self.roiThreeIn.setGeometry(x_cln2, 259, w_cln2, h_lbl)
    self.roiFourTxt = QLabel('ROI, h:', parametersBox)
    self.roiFourTxt.setGeometry(x_cln1, 285, w_cln1, h_txt)
    self.roiFourIn = QLineEdit(parametersBox)
    self.roiFourIn.setGeometry(x_cln2, 289, w_cln2, h_lbl)
    self.roiBtn = QPushButton('Select ROI', parametersBox)
    self.roiBtn.setGeometry(x_cln1 - 10, 315, 150, h_btn)
    self.roiBtn.clicked.connect(self.roiBtn_clicked)

    #third column
    x_cln1 = 340
    x_cln2 = 425
    w_cln1 = 60
    w_cln2 = 50
    adjustFramesTxt = QLabel('Adjust frames:', parametersBox)
    adjustFramesTxt.setGeometry(x_cln1, 20, 100, h_txt)
    self.rotationAngleInTxt = QLabel('Rotation (deg):', parametersBox)
    self.rotationAngleInTxt.setGeometry(x_cln1, 45, 120, h_txt)
    self.rotationAngleIn = QLineEdit(parametersBox)
    self.rotationAngleIn.setGeometry(x_cln2, 49, w_cln2, h_lbl)
    self.brightnessTxt = QLabel('Brightness:', parametersBox)
    self.brightnessTxt.setGeometry(x_cln1, 75, 150, h_txt)
    self.brightnessSlider = QSlider(Qt.Horizontal, parametersBox)
    self.brightnessSlider.setGeometry(x_cln1, 105, 115, 25)
    self.brightnessSlider.setMinimum(-50)
    self.brightnessSlider.setMaximum(50)
    self.brightnessSlider.setValue(0)
    self.brightnessSlider.sliderReleased.connect(self.editFramesSlider_released)
    self.brightnessLbl = QLabel('0', parametersBox)
    self.brightnessLbl.setGeometry(x_cln2 + 3, 80, w_cln2 - 5, h_lbl - 4)
    self.brightnessLbl.setStyleSheet('background-color: white')
    self.contrastTxt = QLabel('Contrast:', parametersBox)
    self.contrastTxt.setGeometry(x_cln1, 125, 150, h_txt)
    self.contrastSlider = QSlider(Qt.Horizontal, parametersBox)
    self.contrastSlider.setGeometry(x_cln1, 155, 115, 25)
    self.contrastSlider.setMinimum(-100)
    self.contrastSlider.setMaximum(+100)
    self.contrastSlider.setValue(0)
    self.contrastSlider.sliderReleased.connect(self.editFramesSlider_released)
    self.contrastLbl = QLabel('0', parametersBox)
    self.contrastLbl.setGeometry(x_cln2 + 3, 130, w_cln2 - 5, h_lbl - 4)
    self.contrastLbl.setStyleSheet('background-color: white')
    self.grayscale = QCheckBox('Grayscale', parametersBox)
    self.grayscale.setGeometry(x_cln1 - 5, 175, 100, h_btn)
    correctionTxt = QLabel('Correction lengths (mm):', parametersBox)
    correctionTxt.setGeometry(x_cln1, 200, 150, h_txt)
    self.sLengthTxt = QLabel('Horizontal:', parametersBox)
    self.sLengthTxt.setGeometry(x_cln1, 225, 130, h_txt)
    self.sLengthIn = QLineEdit('-', parametersBox)
    self.sLengthIn.setGeometry(x_cln2, 229, w_cln2, h_lbl)
    self.sWidthTxt = QLabel('Vertical:', parametersBox)
    self.sWidthTxt.setGeometry(x_cln1, 255, 130, h_txt)
    self.sWidthIn = QLineEdit('-', parametersBox)
    self.sWidthIn.setGeometry(x_cln2, 259, w_cln2, h_lbl)
    self.perspectiveBtn = QPushButton('Correct perspective', parametersBox)
    self.perspectiveBtn.setGeometry(x_cln1 - 10, 285, 150, h_btn)
    self.perspectiveBtn.clicked.connect(self.perspectiveBtn_clicked)
    self.originalBtn = QPushButton('Restore original', parametersBox)
    self.originalBtn.setGeometry(x_cln1 - 10, 315, 150, h_btn)
    self.originalBtn.clicked.connect(self.originalBtn_clicked)

    # fourth column
    x_cln1 = 500
    x_cln2 = 595
    analysisTxt = QLabel('Analysis:', parametersBox)
    analysisTxt.setGeometry(x_cln1, 20, w_cln1, h_txt)
    self.analysisSelectionBox = QComboBox(parametersBox)
    self.analysisSelectionBox.setGeometry(x_cln1 - 10, 45, 150, h_btn)
    self.analysisSelectionBox.addItem('Choose analysis')
    self.analysisSelectionBox.addItem('Manual tracking')
    self.analysisSelectionBox.addItem('Luma tracking')
    self.analysisSelectionBox.addItem('Color tracking')
    self.analysisSelectionBox.addItem('HSV tracking')
    self.analysisSelectionBox.activated[str].connect(self.analysis_click)
    saveLoadTxt = QLabel('Save/Load:', parametersBox)
    saveLoadTxt.setGeometry(x_cln1, 70, w_cln1, h_txt)
    self.saveParBtn = QPushButton('Save parameters', parametersBox)
    self.saveParBtn.setGeometry(x_cln1 - 10, 95, 150, h_btn)
    self.saveParBtn.clicked.connect(self.saveParBtn_clicked)
    self.loadParBtn = QPushButton('Load parameters', parametersBox)
    self.loadParBtn.setGeometry(x_cln1 - 10, 125, 150, h_btn)
    self.loadParBtn.clicked.connect(self.loadParBtn_clicked)
    exportTxt = QLabel('Save edited video:', parametersBox)
    exportTxt.setGeometry(x_cln1, 200, 150, h_txt)
    self.newVideoHelpBtn = QPushButton('?', parametersBox)
    self.newVideoHelpBtn.setGeometry(x_cln2 + 15, 199, 30, h_btn)
    self.newVideoHelpBtn.clicked.connect(self.newVideoHelpBtn_clicked)
    fpsTxt = QLabel('Frame rate (fps):', parametersBox)
    fpsTxt.setGeometry(x_cln1, 225, 120, h_txt)
    self.fpsIn = QLineEdit('30', parametersBox)
    self.fpsIn.setGeometry(x_cln2, 229, 40, h_lbl)
    codecTxt = QLabel('Codec:', parametersBox)
    codecTxt.setGeometry(x_cln1, 255, 100, h_txt)
    self.codecIn = QLineEdit('mp4v', parametersBox)
    self.codecIn.setGeometry(x_cln2, 259, 40, h_lbl)
    formatTxt = QLabel('Format:', parametersBox)
    formatTxt.setGeometry(x_cln1, 285, 100, h_txt)
    self.formatIn = QLineEdit('mp4', parametersBox)
    self.formatIn.setGeometry(x_cln2, 289, 40, h_lbl)
    self.exportVideoBtn = QPushButton('Export video', parametersBox)
    self.exportVideoBtn.setGeometry(x_cln1 - 10, 315, 150, h_btn)
    self.exportVideoBtn.clicked.connect(self.exportVideoBtn_clicked)

    # preview label
    x_cln1 = 650
    self.win1 = QLabel(parametersBox)
    self.win1.setGeometry(x_cln1, 25, 390, 270)
    self.win1.setStyleSheet('background-color: white')
    self.frameTxt = QLabel('Current frame:', parametersBox)
    self.frameTxt.setGeometry(x_cln1, 295, 120, h_txt)
    self.frameIn = QLineEdit('0', parametersBox)
    self.frameIn.setGeometry(x_cln1 + 90, 299, w_cln2, h_lbl)
    self.goToFrameBtn = QPushButton('Go to frame', parametersBox)
    self.goToFrameBtn.setGeometry(x_cln1 + 140, 295, 100, h_btn)
    self.goToFrameBtn.clicked.connect(self.goToFrameBtn_clicked)
    self.previewSlider = QSlider(Qt.Horizontal, parametersBox)
    self.previewSlider.setGeometry(x_cln1, 325, 390, 25)
    self.previewSlider.sliderReleased.connect(self.sliderValue_released)
#    self.previewSlider.valueChanged.connect(self.sliderValue_released)
    self.showFrameLargeBtn = QPushButton('Show frame', parametersBox)
    self.showFrameLargeBtn.setGeometry(930, 295, 115, h_btn)
    self.showFrameLargeBtn.clicked.connect(self.showFrameLargeBtn_clicked)

def previewBox_Win(self):
    self.setWindowTitle('Flame Tracker (v1.1.1)')
    self.setGeometry(25, 25, 1070, 740) #10,10,1000,720
    #Box to choose video parameters, widgets are listed below
    parametersBox = QGroupBox('Preview box', self)
    parametersBox.setGeometry(10, 5, 1050, 350)
    #This box changes for each analysis;
    #widgets must be declared in the specific py file
    self.analysisGroupBox = QGroupBox('Analysis box', self)
    self.analysisGroupBox.setGeometry(10, 360, 1050, 370)

    # this text box is only shown at the beginning
    tempBox = QGroupBox(' ', self.analysisGroupBox)
    tempBox.setGeometry(0, 0, 1050, 390)
    introTxt = QLabel('Select the analysis method from -Choose analysis- to activate this panel', tempBox)
    introTxt.setGeometry(100, 100, 600, 100)
    introTxt.setStyleSheet('font: 12pt Helvetica')

    ### parametersBox
    # first column
    x_cln1 = 10
    x_cln2 = 105
    h_lbl = 20
    h_txt = 30
    h_btn = 25
    self.msgLabel = QLabel('Welcome to the Flame Tracker! \n\n Click on the Help button to get started.', parametersBox)
    self.msgLabel.setGeometry(x_cln1, 20, 140, h_btn + 55)
    self.msgLabel.setStyleSheet('background-color: white')
    self.msgLabel.setWordWrap(True)
    self.helpBtn = QPushButton('Help', parametersBox)
    self.helpBtn.setGeometry(x_cln1, 105, 140, h_btn)
    self.helpBtn.clicked.connect(self.helpBtn_clicked)
    self.openBtn = QPushButton('Open', parametersBox)
    self.openBtn.setGeometry(x_cln1, 135, 50, h_btn)
    self.openBtn.clicked.connect(self.openBtn_clicked)
    self.openSelectionBox = QComboBox(parametersBox)
    self.openSelectionBox.setGeometry(65, 136, 85, h_btn - 1)
    self.openSelectionBox.addItem('Video')
    self.openSelectionBox.addItem('Image(s)')
    self.openSelectionBox.activated[str].connect(self.openSelection_click)
    self.fNameLbl = QLabel('(file name)', parametersBox)
    self.fNameLbl.setGeometry(x_cln1, 170, 140, h_lbl)
    self.fNameLbl.setStyleSheet('background-color: white')
    vWidthTxt = QLabel('Width (px):', parametersBox)
    vWidthTxt.setGeometry(x_cln1, 195, 60, h_txt)
    self.vWidthLbl = QLabel(parametersBox)
    self.vWidthLbl.setGeometry(x_cln2, 200, 45, h_lbl)
    self.vWidthLbl.setStyleSheet('background-color: white')
    vHeightTxt = QLabel('Height (px):', parametersBox)
    vHeightTxt.setGeometry(x_cln1, 225, 60, h_txt)
    self.vHeightLbl = QLabel(parametersBox)
    self.vHeightLbl.setGeometry(x_cln2, 230, 45, h_lbl)
    self.vHeightLbl.setStyleSheet('background-color: white')
    vFpsTxt = QLabel('Frame rate (fps):', parametersBox)
    vFpsTxt.setGeometry(x_cln1, 255, 85, h_txt)
    self.vFpsLbl = QLabel(parametersBox)
    self.vFpsLbl.setGeometry(x_cln2, 260, 45, h_lbl)
    self.vFpsLbl.setStyleSheet('background-color: white')
    vFramesTxt = QLabel('Frames #:', parametersBox)
    vFramesTxt.setGeometry(x_cln1, 285, 65, h_txt)
    self.vFramesLbl = QLabel(parametersBox)
    self.vFramesLbl.setGeometry(x_cln2, 290, 45, h_lbl)
    self.vFramesLbl.setStyleSheet('background-color: white')
    vDurationTxt = QLabel('Duration (s):', parametersBox)
    vDurationTxt.setGeometry(x_cln1, 315, 65, h_txt)
    self.vDurationLbl = QLabel(parametersBox)
    self.vDurationLbl.setGeometry(x_cln2, 320, 45, h_lbl)
    self.vDurationLbl.setStyleSheet('background-color: white')

    #second column
    x_cln1 = 170
    x_cln2 = 260
    w_cln1 = 80
    w_cln2 = 50
    clmn2_Txt = QLabel(parametersBox)
    clmn2_Txt.setText('Video parameters:')
    clmn2_Txt.setGeometry(x_cln1, 10, 120, h_txt)
    self.firstFrameTxt = QLabel('First frame:', parametersBox)
    self.firstFrameTxt.setGeometry(x_cln1, 35, w_cln1, h_txt)
    self.firstFrameIn = QLineEdit(parametersBox)
    self.firstFrameIn.setGeometry(x_cln2, 40, w_cln2, h_lbl)
    self.lastFrameTxt = QLabel('Last frame:', parametersBox)
    self.lastFrameTxt.setGeometry(x_cln1, 65, w_cln1, h_txt)
    self.lastFrameIn = QLineEdit(parametersBox)
    self.lastFrameIn.setGeometry(x_cln2, 70, w_cln2, h_lbl)
    self.skipFrameTxt = QLabel('Skip frames:', parametersBox)
    self.skipFrameTxt.setGeometry(x_cln1, 95, w_cln1, h_txt)
    self.skipFrameIn = QLineEdit(parametersBox)
    self.skipFrameIn.setGeometry(x_cln2, 100, w_cln2, h_lbl)
    self.scaleTxt = QLabel('Scale (px/mm):', parametersBox)
    self.scaleTxt.setGeometry(x_cln1, 125, w_cln1, h_txt)
    self.scaleIn = QLineEdit(parametersBox)
    self.scaleIn.setGeometry(x_cln2, 130, w_cln2, h_lbl)
    self.measureScaleBtn = QPushButton('Measure scale', parametersBox)
    self.measureScaleBtn.setGeometry(x_cln1, 160, 140, h_btn)
    self.measureScaleBtn.clicked.connect(self.measureScaleBtn_clicked)
    self.roiOneTxt = QLabel('ROI, x:', parametersBox)
    self.roiOneTxt.setGeometry(x_cln1, 195, w_cln1, h_txt)
    self.roiOneIn = QLineEdit(parametersBox)
    self.roiOneIn.setGeometry(x_cln2, 200, w_cln2, h_lbl)
    self.roiTwoTxt = QLabel('ROI, y:', parametersBox)
    self.roiTwoTxt.setGeometry(x_cln1, 225, w_cln1, h_txt)
    self.roiTwoIn = QLineEdit(parametersBox)
    self.roiTwoIn.setGeometry(x_cln2, 230, w_cln2, h_lbl)
    self.roiThreeTxt = QLabel('ROI, w:', parametersBox)
    self.roiThreeTxt.setGeometry(x_cln1, 255, w_cln1, h_txt)
    self.roiThreeIn = QLineEdit(parametersBox)
    self.roiThreeIn.setGeometry(x_cln2, 260, w_cln2, h_lbl)
    self.roiFourTxt = QLabel('ROI, h:', parametersBox)
    self.roiFourTxt.setGeometry(x_cln1, 285, w_cln1, h_txt)
    self.roiFourIn = QLineEdit(parametersBox)
    self.roiFourIn.setGeometry(x_cln2, 290, w_cln2, h_lbl)
    self.roiBtn = QPushButton('Select ROI', parametersBox)
    self.roiBtn.setGeometry(x_cln1, 317, 140, h_btn)
    self.roiBtn.clicked.connect(self.roiBtn_clicked)

    #third column
    x_cln1 = 330
    x_cln2 = 420
    w_cln1 = 60
    w_cln2 = 50
    adjustFramesTxt = QLabel('Adjust frames:', parametersBox)
    adjustFramesTxt.setGeometry(x_cln1, 10, 100, h_txt)
    self.rotationAngleInTxt = QLabel('Rotation (deg):', parametersBox)
    self.rotationAngleInTxt.setGeometry(x_cln1, 35, 120, h_txt)
    self.rotationAngleIn = QLineEdit(parametersBox)
    self.rotationAngleIn.setGeometry(x_cln2, 39, w_cln2, h_lbl)
    self.brightnessTxt = QLabel('Brightness:', parametersBox)
    self.brightnessTxt.setGeometry(x_cln1, 65, 150, h_txt)
    self.brightnessSlider = QSlider(Qt.Horizontal, parametersBox)
    self.brightnessSlider.setGeometry(x_cln1, 95, 137, 15)
    self.brightnessSlider.setMinimum(-50)
    self.brightnessSlider.setMaximum(50)
    self.brightnessSlider.setValue(0)
    self.brightnessSlider.sliderReleased.connect(self.editFramesSlider_released)
    self.brightnessSlider.valueChanged.connect(self.editFramesSlider_released)
    self.brightnessLbl = QLabel('0', parametersBox)
    self.brightnessLbl.setGeometry(x_cln2, 70, w_cln2, h_lbl - 2)
    self.brightnessLbl.setStyleSheet('background-color: white')
    self.contrastTxt = QLabel('Contrast:', parametersBox)
    self.contrastTxt.setGeometry(x_cln1, 110, 150, h_txt)
    self.contrastSlider = QSlider(Qt.Horizontal, parametersBox)
    self.contrastSlider.setGeometry(x_cln1, 140, 137, 15)
    self.contrastSlider.setMinimum(-100)
    self.contrastSlider.setMaximum(+100)
    self.contrastSlider.setValue(0)
    self.contrastSlider.sliderReleased.connect(self.editFramesSlider_released)
    self.contrastSlider.valueChanged.connect(self.editFramesSlider_released)
    self.contrastLbl = QLabel('0', parametersBox)
    self.contrastLbl.setGeometry(x_cln2, 115, w_cln2, h_lbl - 2)
    self.contrastLbl.setStyleSheet('background-color: white')
    self.grayscale = QCheckBox('Grayscale', parametersBox)
    self.grayscale.setGeometry(x_cln1, 165, 100, h_btn)
    self.correctionTxt = QLabel('Correction lengths (mm):', parametersBox)
    self.correctionTxt.setGeometry(x_cln1, 195, 140, h_txt)
    self.sLengthTxt = QLabel('Horizontal:', parametersBox)
    self.sLengthTxt.setGeometry(x_cln1, 220, 130, h_txt)
    self.sLengthIn = QLineEdit('-', parametersBox)
    self.sLengthIn.setGeometry(x_cln2, 225, w_cln2, h_lbl)
    self.sWidthTxt = QLabel('Vertical:', parametersBox)
    self.sWidthTxt.setGeometry(x_cln1, 250, w_cln1, h_txt)
    self.sWidthIn = QLineEdit('-', parametersBox)
    self.sWidthIn.setGeometry(x_cln2, 255, w_cln2, h_lbl)
    self.perspectiveBtn = QPushButton('Correct Perspective', parametersBox)
    self.perspectiveBtn.setGeometry(x_cln1, 280, 140, h_btn)
    self.perspectiveBtn.clicked.connect(self.perspectiveBtn_clicked)
    self.originalBtn = QPushButton('Restore original', parametersBox)
    self.originalBtn.setGeometry(x_cln1, 315, 140, h_btn)
    self.originalBtn.clicked.connect(self.originalBtn_clicked)

    # fourth column
    x_cln1 = 490
    x_cln2 = 580
    analysisTxt = QLabel('Analysis:', parametersBox)
    analysisTxt.setGeometry(x_cln1, 10, w_cln1, h_txt)
    self.analysisSelectionBox = QComboBox(parametersBox)
    self.analysisSelectionBox.setGeometry(x_cln1, 35, 140, h_btn)
    self.analysisSelectionBox.addItem('Choose analysis')
    self.analysisSelectionBox.addItem('Manual tracking')
    self.analysisSelectionBox.addItem('Luma tracking')
    self.analysisSelectionBox.addItem('Color tracking')
    self.analysisSelectionBox.addItem('HSV tracking')
    self.analysisSelectionBox.activated[str].connect(self.analysis_click)
    saveLoadTxt = QLabel('Save/Load:', parametersBox)
    saveLoadTxt.setGeometry(x_cln1, 60, w_cln1, h_txt)
    self.saveParBtn = QPushButton('Save Parameters', parametersBox)
    self.saveParBtn.setGeometry(x_cln1, 85, 140, h_btn)
    self.saveParBtn.clicked.connect(self.saveParBtn_clicked)
    self.loadParBtn = QPushButton('Load Parameters', parametersBox)
    self.loadParBtn.setGeometry(x_cln1, 115, 140, h_btn)
    self.loadParBtn.clicked.connect(self.loadParBtn_clicked)
    self.figSize = QCheckBox('Half-size figures', parametersBox)
    self.figSize.setGeometry(x_cln1, 155, 150, h_btn)
    exportTxt = QLabel('Save edited video:', parametersBox)
    exportTxt.setGeometry(x_cln1, 190, 140, h_txt)
    self.newVideoHelpBtn = QPushButton('?', parametersBox)
    self.newVideoHelpBtn.setGeometry(x_cln2 + 30, 195, 20, h_btn - 5)
    self.newVideoHelpBtn.clicked.connect(self.newVideoHelpBtn_clicked)
    fpsTxt = QLabel('Frame rate (fps):', parametersBox)
    fpsTxt.setGeometry(x_cln1, 220, 120, h_txt)
    self.fpsIn = QLineEdit('24', parametersBox)
    self.fpsIn.setGeometry(x_cln2, 225, 50, h_lbl)
    codecTxt = QLabel('Codec:', parametersBox)
    codecTxt.setGeometry(x_cln1, 250, 100, h_txt)
    self.codecIn = QLineEdit('mp4v', parametersBox)
    self.codecIn.setGeometry(x_cln2, 255, 50, h_lbl)
    formatTxt = QLabel('Format:', parametersBox)
    formatTxt.setGeometry(x_cln1, 280, 100, h_txt)
    self.formatIn = QLineEdit('mp4', parametersBox)
    self.formatIn.setGeometry(x_cln2, 285, 50, h_lbl)
    self.exportVideoBtn = QPushButton('Export video', parametersBox)
    self.exportVideoBtn.setGeometry(x_cln1, 315, 140, h_btn)
    self.exportVideoBtn.clicked.connect(self.exportVideoBtn_clicked)

    # preview label
    x_cln1 = 650
    self.win1 = QLabel(parametersBox)
    self.win1.setGeometry(x_cln1, 15, 390, 270)
    self.win1.setStyleSheet('background-color: white')
    self.frameTxt = QLabel('Current frame:', parametersBox)
    self.frameTxt.setGeometry(x_cln1, 290, 120, h_txt)
    self.frameIn = QLineEdit('0', parametersBox)
    self.frameIn.setGeometry(x_cln1 + 90, 296, w_cln2, h_lbl)
    self.goToFrameBtn = QPushButton('Go to frame', parametersBox)
    self.goToFrameBtn.setGeometry(x_cln1 + 165, 293, 100, h_btn - 2)
    self.goToFrameBtn.clicked.connect(self.goToFrameBtn_clicked)
    self.previewSlider = QSlider(Qt.Horizontal, parametersBox)
    self.previewSlider.setGeometry(x_cln1, 325, 390, 15)
    self.previewSlider.sliderReleased.connect(self.sliderValue_released)
    self.previewSlider.valueChanged.connect(self.sliderValue_released) #in Windows these two events are very different
    self.showFrameLargeBtn = QPushButton('Show frame', parametersBox)
    self.showFrameLargeBtn.setGeometry(945, 293, 90, h_btn - 2)
    self.showFrameLargeBtn.clicked.connect(self.showFrameLargeBtn_clicked)

def previewBox_Linux(self):
    print('Welcome Linux user!')
    self.setStyleSheet('font: 12pt Helvetica')
    self.setWindowTitle('Flame Tracker (v1.1.1)')
    self.setGeometry(10, 10, 1070, 755)
    #Box to choose video parameters, the widgets are listed below
    parametersBox = QGroupBox('Preview box', self)
    parametersBox.setGeometry(10, 5, 1050, 350)
    #This box changes for each analysis;
    #widgets must be declared in the specific py file
    self.analysisGroupBox = QGroupBox('Analysis box', self)
    self.analysisGroupBox.setGeometry(10, 360, 1050, 390)

    # this text box is only shown at the beginning
    tempBox = QGroupBox(' ', self.analysisGroupBox)
    tempBox.setGeometry(0, 0, 1050, 390)
    introTxt = QLabel('Select the analysis method from -Choose analysis- to activate this panel', tempBox)
    introTxt.setGeometry(100, 100, 600, 100)
    introTxt.setStyleSheet('font: 16pt Helvetica')

    ### parametersBox
    # first column
    x_cln1 = 10
    x_cln2 = 105
    h_lbl = 20
    h_txt = 30
    h_btn = 30
    self.msgLabel = QLabel('Welcome to the Flame Tracker! \n\n Click on the Help button to get started.', parametersBox)
    self.msgLabel.setGeometry(x_cln1, 25, 140, h_lbl + 55)
    self.msgLabel.setStyleSheet('background-color: white')
    self.msgLabel.setWordWrap(True)
    self.helpBtn = QPushButton('Help', parametersBox)
    self.helpBtn.setGeometry(x_cln1 - 5, 105, 150, h_btn)
    self.helpBtn.clicked.connect(self.helpBtn_clicked)
    self.openBtn = QPushButton('Open', parametersBox)
    self.openBtn.setGeometry(x_cln1 - 5, 135, 60, h_btn)
    self.openBtn.clicked.connect(self.openBtn_clicked)
    self.openSelectionBox = QComboBox(parametersBox)
    self.openSelectionBox.setGeometry(x_cln1 + 48, 136, 100, h_btn)
    self.openSelectionBox.addItem('Video')
    self.openSelectionBox.addItem('Image(s)')
    self.openSelectionBox.activated[str].connect(self.openSelection_click)
    self.fNameLbl = QLabel('(file name)', parametersBox)
    self.fNameLbl.setGeometry(x_cln1, 170, 140, h_lbl)
    self.fNameLbl.setStyleSheet('background-color: white')
    vWidthTxt = QLabel('Width (px):', parametersBox)
    vWidthTxt.setGeometry(x_cln1, 195, 70, h_txt)
    self.vWidthLbl = QLabel(parametersBox)
    self.vWidthLbl.setGeometry(x_cln2, 199, 45, h_lbl)
    self.vWidthLbl.setStyleSheet('background-color: white')
    vHeightTxt = QLabel('Height (px):', parametersBox)
    vHeightTxt.setGeometry(x_cln1, 225, 70, h_txt)
    self.vHeightLbl = QLabel(parametersBox)
    self.vHeightLbl.setGeometry(x_cln2, 229, 45, h_lbl)
    self.vHeightLbl.setStyleSheet('background-color: white')
    vFpsTxt = QLabel('Frame rate (fps):', parametersBox)
    vFpsTxt.setGeometry(x_cln1, 255, 90, h_txt)
    self.vFpsLbl = QLabel(parametersBox)
    self.vFpsLbl.setGeometry(x_cln2, 259, 45, h_lbl)
    self.vFpsLbl.setStyleSheet('background-color: white')
    vFramesTxt = QLabel('Frames #:', parametersBox)
    vFramesTxt.setGeometry(x_cln1, 285, 70, h_txt)
    self.vFramesLbl = QLabel(parametersBox)
    self.vFramesLbl.setGeometry(x_cln2, 289, 45, h_lbl)
    self.vFramesLbl.setStyleSheet('background-color: white')
    vDurationTxt = QLabel('Duration (s):', parametersBox)
    vDurationTxt.setGeometry(x_cln1, 315, 70, h_txt)
    self.vDurationLbl = QLabel(parametersBox)
    self.vDurationLbl.setGeometry(x_cln2, 319, 45, h_lbl)
    self.vDurationLbl.setStyleSheet('background-color: white')

    #second column
    x_cln1 = 180
    x_cln2 = 265
    w_cln1 = 80
    w_cln2 = 50
    h_lbl = 22
    clmn2_Txt = QLabel('Video parameters:', parametersBox)
    clmn2_Txt.setGeometry(x_cln1, 20, 120, h_txt)

    #CAS Squish to fit xrefpix to display
    self.firstFrameTxt = QLabel('First frame:', parametersBox)
    self.firstFrameTxt.setGeometry(x_cln1, 40, w_cln1, h_txt)
    self.firstFrameIn = QLineEdit(parametersBox)
    self.firstFrameIn.setGeometry(x_cln2, 44, w_cln2, h_lbl)
    self.lastFrameTxt = QLabel('Last frame:', parametersBox)
    self.lastFrameTxt.setGeometry(x_cln1, 65, w_cln1, h_txt)
    self.lastFrameIn = QLineEdit(parametersBox)
    self.lastFrameIn.setGeometry(x_cln2, 69, w_cln2, h_lbl)
    self.skipFrameTxt = QLabel('Skip frames:', parametersBox)
    self.skipFrameTxt.setGeometry(x_cln1, 90, w_cln1, h_txt)
    self.skipFrameIn = QLineEdit(parametersBox)
    self.skipFrameIn.setGeometry(x_cln2, 94, w_cln2, h_lbl)
    self.scaleTxt = QLabel('Scale (px/mm):', parametersBox)
    self.scaleTxt.setGeometry(x_cln1, 115, w_cln1, h_txt)
    self.scaleIn = QLineEdit(parametersBox)
    self.scaleIn.setGeometry(x_cln2, 119, w_cln2, h_lbl)

    #CAS add xref line
    self.xrefTxt = QLabel('xref (px):', parametersBox)
    self.xrefTxt.setGeometry(x_cln1, 140, w_cln1, h_txt)
    self.xref = QLineEdit(parametersBox)
    xRefGUI_shiftBackAmnt = 20
    xRefGUI_extendAmnt = 20
    self.xref.setGeometry(x_cln2-xRefGUI_shiftBackAmnt, 144, w_cln2+xRefGUI_shiftBackAmnt+xRefGUI_extendAmnt, h_lbl)

    self.measureScaleBtn = QPushButton('Measure scale', parametersBox)
    #self.measureScaleBtn.setGeometry(x_cln1 - 10, 165, 150, h_btn)
    self.measureScaleBtn.setGeometry(x_cln1 - 10, 168, 150, h_btn-2)
    self.measureScaleBtn.clicked.connect(self.measureScaleBtn_clicked)
    self.roiOneTxt = QLabel('ROI, x:', parametersBox)
    self.roiOneTxt.setGeometry(x_cln1, 195, w_cln1, h_txt)
    self.roiOneIn = QLineEdit(parametersBox)
    self.roiOneIn.setGeometry(x_cln2, 199, w_cln2, h_lbl)
    self.roiTwoTxt = QLabel('ROI, y:', parametersBox)
    self.roiTwoTxt.setGeometry(x_cln1, 225, w_cln1, h_txt)
    self.roiTwoIn = QLineEdit(parametersBox)
    self.roiTwoIn.setGeometry(x_cln2, 229, w_cln2, h_lbl)
    self.roiThreeTxt = QLabel('ROI, w:', parametersBox)
    self.roiThreeTxt.setGeometry(x_cln1, 255, w_cln1, h_txt)
    self.roiThreeIn = QLineEdit(parametersBox)
    self.roiThreeIn.setGeometry(x_cln2, 259, w_cln2, h_lbl)
    self.roiFourTxt = QLabel('ROI, h:', parametersBox)
    self.roiFourTxt.setGeometry(x_cln1, 285, w_cln1, h_txt)
    self.roiFourIn = QLineEdit(parametersBox)
    self.roiFourIn.setGeometry(x_cln2, 289, w_cln2, h_lbl)
    self.roiBtn = QPushButton('Select ROI', parametersBox)
    self.roiBtn.setGeometry(x_cln1 - 10, 315, 150, h_btn)
    self.roiBtn.clicked.connect(self.roiBtn_clicked)

    #third column
    x_cln1 = 340
    x_cln2 = 425
    w_cln1 = 60
    w_cln2 = 50
    adjustFramesTxt = QLabel('Adjust frames:', parametersBox)
    adjustFramesTxt.setGeometry(x_cln1, 20, 100, h_txt)
    self.rotationAngleInTxt = QLabel('Rotation (deg):', parametersBox)
    self.rotationAngleInTxt.setGeometry(x_cln1, 45, 120, h_txt)
    self.rotationAngleIn = QLineEdit(parametersBox)
    self.rotationAngleIn.setGeometry(x_cln2, 49, w_cln2, h_lbl)
    self.brightnessTxt = QLabel('Brightness:', parametersBox)
    self.brightnessTxt.setGeometry(x_cln1, 75, 150, h_txt)
    self.brightnessSlider = QSlider(Qt.Horizontal, parametersBox)
    self.brightnessSlider.setGeometry(x_cln1, 105, 115, 25)
    self.brightnessSlider.setMinimum(-50)
    self.brightnessSlider.setMaximum(50)
    self.brightnessSlider.setValue(0)
    self.brightnessSlider.sliderReleased.connect(self.editFramesSlider_released)
    self.brightnessSlider.valueChanged.connect(self.editFramesSlider_released)
    self.brightnessLbl = QLabel('0', parametersBox)
    self.brightnessLbl.setGeometry(x_cln2 + 3, 80, w_cln2 - 5, h_lbl - 4)
    self.brightnessLbl.setStyleSheet('background-color: white')
    self.contrastTxt = QLabel('Contrast:', parametersBox)
    self.contrastTxt.setGeometry(x_cln1, 125, 150, h_txt)
    self.contrastSlider = QSlider(Qt.Horizontal, parametersBox)
    self.contrastSlider.setGeometry(x_cln1, 155, 115, 25)
    self.contrastSlider.setMinimum(-100)
    self.contrastSlider.setMaximum(+100)
    self.contrastSlider.setValue(0)
    self.contrastSlider.sliderReleased.connect(self.editFramesSlider_released)
    self.contrastSlider.valueChanged.connect(self.editFramesSlider_released)
    self.contrastLbl = QLabel('0', parametersBox)
    self.contrastLbl.setGeometry(x_cln2 + 3, 130, w_cln2 - 5, h_lbl - 4)
    self.contrastLbl.setStyleSheet('background-color: white')
    self.grayscale = QCheckBox('Grayscale', parametersBox)
    self.grayscale.setGeometry(x_cln1 - 5, 175, 100, h_btn)
    correctionTxt = QLabel('Correction lengths (mm):', parametersBox)
    correctionTxt.setGeometry(x_cln1, 200, 150, h_txt)
    self.sLengthTxt = QLabel('Horizontal:', parametersBox)
    self.sLengthTxt.setGeometry(x_cln1, 225, 130, h_txt)
    self.sLengthIn = QLineEdit('-', parametersBox)
    self.sLengthIn.setGeometry(x_cln2, 229, w_cln2, h_lbl)
    self.sWidthTxt = QLabel('Vertical:', parametersBox)
    self.sWidthTxt.setGeometry(x_cln1, 255, 130, h_txt)
    self.sWidthIn = QLineEdit('-', parametersBox)
    self.sWidthIn.setGeometry(x_cln2, 259, w_cln2, h_lbl)
    self.perspectiveBtn = QPushButton('Correct perspective', parametersBox)
    self.perspectiveBtn.setGeometry(x_cln1 - 10, 285, 150, h_btn)
    self.perspectiveBtn.clicked.connect(self.perspectiveBtn_clicked)
    self.originalBtn = QPushButton('Restore original', parametersBox)
    self.originalBtn.setGeometry(x_cln1 - 10, 315, 150, h_btn)
    self.originalBtn.clicked.connect(self.originalBtn_clicked)

    # fourth column
    x_cln1 = 500
    x_cln2 = 595
    analysisTxt = QLabel('Analysis:', parametersBox)
    analysisTxt.setGeometry(x_cln1, 20, w_cln1, h_txt)
    self.analysisSelectionBox = QComboBox(parametersBox)
    self.analysisSelectionBox.setGeometry(x_cln1 - 10, 45, 150, h_btn)
    self.analysisSelectionBox.addItem('Choose analysis')
    self.analysisSelectionBox.addItem('Manual tracking')
    self.analysisSelectionBox.addItem('Luma tracking')
    self.analysisSelectionBox.addItem('Color tracking')
    self.analysisSelectionBox.addItem('HSV tracking')
    self.analysisSelectionBox.activated[str].connect(self.analysis_click)
    saveLoadTxt = QLabel('Save/Load:', parametersBox)
    saveLoadTxt.setGeometry(x_cln1, 70, w_cln1, h_txt)
    self.saveParBtn = QPushButton('Save parameters', parametersBox)
    self.saveParBtn.setGeometry(x_cln1 - 10, 95, 150, h_btn)
    self.saveParBtn.clicked.connect(self.saveParBtn_clicked)
    self.loadParBtn = QPushButton('Load parameters', parametersBox)
    self.loadParBtn.setGeometry(x_cln1 - 10, 125, 150, h_btn)
    self.loadParBtn.clicked.connect(self.loadParBtn_clicked)
    exportTxt = QLabel('Save edited video:', parametersBox)
    exportTxt.setGeometry(x_cln1, 200, 150, h_txt)
    self.newVideoHelpBtn = QPushButton('?', parametersBox)
    self.newVideoHelpBtn.setGeometry(x_cln2 + 15, 199, 30, h_btn)
    self.newVideoHelpBtn.clicked.connect(self.newVideoHelpBtn_clicked)
    fpsTxt = QLabel('Frame rate (fps):', parametersBox)
    fpsTxt.setGeometry(x_cln1, 225, 120, h_txt)
    self.fpsIn = QLineEdit('30', parametersBox)
    self.fpsIn.setGeometry(x_cln2, 229, 40, h_lbl)
    codecTxt = QLabel('Codec:', parametersBox)
    codecTxt.setGeometry(x_cln1, 255, 100, h_txt)
    self.codecIn = QLineEdit('mp4v', parametersBox)
    self.codecIn.setGeometry(x_cln2, 259, 40, h_lbl)
    formatTxt = QLabel('Format:', parametersBox)
    formatTxt.setGeometry(x_cln1, 285, 100, h_txt)
    self.formatIn = QLineEdit('mp4', parametersBox)
    self.formatIn.setGeometry(x_cln2, 289, 40, h_lbl)
    self.exportVideoBtn = QPushButton('Export video', parametersBox)
    self.exportVideoBtn.setGeometry(x_cln1 - 10, 315, 150, h_btn)
    self.exportVideoBtn.clicked.connect(self.exportVideoBtn_clicked)

    # preview label
    x_cln1 = 650
    self.win1 = QLabel(parametersBox)
    self.win1.setGeometry(x_cln1, 25, 390, 270)
    self.win1.setStyleSheet('background-color: white')
    self.frameTxt = QLabel('Current frame:', parametersBox)
    self.frameTxt.setGeometry(x_cln1, 295, 120, h_txt)
    self.frameIn = QLineEdit('0', parametersBox)
    self.frameIn.setGeometry(x_cln1 + 90, 299, w_cln2, h_lbl)
    self.goToFrameBtn = QPushButton('Go to frame', parametersBox)
    self.goToFrameBtn.setGeometry(x_cln1 + 140, 295, 100, h_btn)
    self.goToFrameBtn.clicked.connect(self.goToFrameBtn_clicked)
    self.previewSlider = QSlider(Qt.Horizontal, parametersBox)
    self.previewSlider.setGeometry(x_cln1, 325, 390, 25)
    self.previewSlider.sliderReleased.connect(self.sliderValue_released)
    self.showFrameLargeBtn = QPushButton('Show frame', parametersBox)
    self.showFrameLargeBtn.setGeometry(930, 295, 115, h_btn)
    self.showFrameLargeBtn.clicked.connect(self.showFrameLargeBtn_clicked)

def manualTrackingBox_Mac(self):
    self.manualTrackingBox = QGroupBox(' ', self.analysisGroupBox)
    self.manualTrackingBox.setGeometry(0,0, 1050, 390)
    self.manualTrackingBox.setStyleSheet('background-color: None')

    #first column
    x_cln1 = 10
    x_cln2 = 120
    h_txt = 30
    h_btn = 30
    h_lbl = 22
    w_cln1 = 80
    w_cln2 = 50
    directionBoxTxt = QLabel('Flame direction:', self.manualTrackingBox)
    directionBoxTxt.setGeometry(x_cln1, 20, 100, h_txt)
    self.directionBox = QComboBox(self.manualTrackingBox)
    self.directionBox.setGeometry(x_cln1 - 5, 45, 150, h_btn)
    self.directionBox.addItem('Left to right')
    self.directionBox.addItem('Right to left')
    self.directionBox.activated.connect(self.directionMT_clicked)
    lightTxt = QLabel('Flashing light (optional):', self.manualTrackingBox)
    lightTxt.setGeometry(x_cln1, 70, 150, h_txt)
    self.lightROIBtn_MT = QPushButton('Pick bright region', self.manualTrackingBox)
    self.lightROIBtn_MT.setGeometry(x_cln1 - 5, 95, 150, h_btn)
    self.lightROIBtn_MT.clicked.connect(self.lightROIBtn_MT_clicked)
    self.filterLight_MT = QComboBox(self.manualTrackingBox)
    self.filterLight_MT.setGeometry(x_cln1 - 5, 120, 150, h_btn)
    self.filterLight_MT.addItem('Track every frame')
    self.filterLight_MT.addItem('Frames light on')
    self.filterLight_MT.addItem('Frames light off')
    self.filterLight_MT.activated.connect(self.filterLight_MT_clicked)
    nClicksTxt = QLabel('Tracking points #:', self.manualTrackingBox)
    nClicksTxt.setGeometry(x_cln1, 150, 100, h_txt)
    self.nClicksLbl = QLineEdit('1', self.manualTrackingBox)
    self.nClicksLbl.setGeometry(x_cln2, 154, 30, h_lbl)
    self.showEdges_MT = QCheckBox('Show tracking lines', self.manualTrackingBox)
    self.showEdges_MT.setGeometry(x_cln1, 180, 140, h_btn)
    self.showEdges_MT.setChecked(True)
    self.manualTrackingBtn = QPushButton('Start Tracking', self.manualTrackingBox)
    self.manualTrackingBtn.setGeometry(x_cln1 - 5, 210, 150, h_btn)
    self.manualTrackingBtn.clicked.connect(self.manualTrackingBtn_clicked)
    self.absValBtn = QPushButton('Absolute values', self.manualTrackingBox)
    self.absValBtn.setGeometry(x_cln1 - 5, 240, 150, h_btn)
    self.absValBtn.clicked.connect(self.absValBtn_MT_clicked)
    self.saveBtn_MT = QPushButton('Save data', self.manualTrackingBox)
    self.saveBtn_MT.setGeometry(x_cln1 - 5, 270, 150, h_btn)
    self.saveBtn_MT.clicked.connect(self.saveBtn_MT_clicked)
    self.helpBtn_MT = QPushButton('Help', self.manualTrackingBox)
    self.helpBtn_MT.setGeometry(x_cln1 - 5, 300, 150, h_btn)
    self.helpBtn_MT.clicked.connect(self.helpBtn_MT_clicked)

    # first label
    self.lbl1_MT = QLabel(self.manualTrackingBox)
    self.lbl1_MT.setGeometry(190, 25, 420, 300)
    self.lbl1_MT.setStyleSheet('background-color: white')

    # second label
    self.lbl2_MT = pg.PlotWidget(self.manualTrackingBox)
    self.lbl2_MT.setGeometry(620, 25, 420, 300)
    self.lbl2_MT.setBackground('w')
    self.lbl2_MT.setLabel('left', 'Spread Rate [mm/s]', color='black', size=14)
    self.lbl2_MT.setLabel('bottom', 'Time [s]', color='black', size=14)
    self.lbl2_MT.getAxis('bottom').setPen(color=(0, 0, 0))
    self.lbl2_MT.getAxis('left').setPen(color=(0, 0, 0))

def manualTrackingBox_Win(self):
    self.manualTrackingBox = QGroupBox('Analysis box', self.analysisGroupBox)
    self.manualTrackingBox.setGeometry(0, 0, 1050, 370)
    self.manualTrackingBox.setStyleSheet('background-color: None')

    #first column
    x_cln1 = 10
    x_cln2 = 120
    h_txt = 30
    h_lbl = 22
    h_btn = 25
    w_cln1 = 80
    w_cln2 = 50
    directionBoxTxt = QLabel('Flame direction:', self.manualTrackingBox)
    directionBoxTxt.setGeometry(x_cln1, 15, 120, h_txt)
    self.directionBox = QComboBox(self.manualTrackingBox)
    self.directionBox.setGeometry(x_cln1, 40, 140, h_btn)
    self.directionBox.addItem('Left to right')
    self.directionBox.addItem('Right to left')
    self.directionBox.activated.connect(self.directionMT_clicked)
    lightTxt = QLabel('Flashing light (optional):', self.manualTrackingBox)
    lightTxt.setGeometry(x_cln1, 70, 140, h_txt)
    self.lightROIBtn_MT = QPushButton('Pick bright region', self.manualTrackingBox)
    self.lightROIBtn_MT.setGeometry(x_cln1, 95, 140, h_btn)
    self.lightROIBtn_MT.clicked.connect(self.lightROIBtn_MT_clicked)
    self.filterLight_MT = QComboBox(self.manualTrackingBox)
    self.filterLight_MT.setGeometry(x_cln1, 125, 140, h_btn)
    self.filterLight_MT.addItem('Track every frame')
    self.filterLight_MT.addItem('Frames light on')
    self.filterLight_MT.addItem('Frames light off')
    self.filterLight_MT.activated.connect(self.filterLight_MT_clicked)
    nClicksTxt = QLabel('Tracking points #:', self.manualTrackingBox)
    nClicksTxt.setGeometry(x_cln1, 155, 140, h_txt)
    self.nClicksLbl = QLineEdit('1', self.manualTrackingBox)
    self.nClicksLbl.setGeometry(x_cln2, 160, 30, h_lbl)
    self.showEdges_MT = QCheckBox('Show tracking lines', self.manualTrackingBox)
    self.showEdges_MT.setGeometry(x_cln1, 185, 140, h_btn)
    self.showEdges_MT.setChecked(True)
    self.manualTrackingBtn = QPushButton('Start Tracking', self.manualTrackingBox)
    self.manualTrackingBtn.setGeometry(x_cln1, 215, 140, h_btn)
    self.manualTrackingBtn.clicked.connect(self.manualTrackingBtn_clicked)
    self.absValBtn = QPushButton('Absolute values', self.manualTrackingBox)
    self.absValBtn.setGeometry(x_cln1, 245, 140, h_btn)
    self.absValBtn.clicked.connect(self.absValBtn_MT_clicked)
    self.saveBtn_MT = QPushButton('Save data', self.manualTrackingBox)
    self.saveBtn_MT.setGeometry(x_cln1, 275, 140, h_btn)
    self.saveBtn_MT.clicked.connect(self.saveBtn_MT_clicked)
    self.helpBtn_MT = QPushButton('Help', self.manualTrackingBox)
    self.helpBtn_MT.setGeometry(x_cln1, 305, 140, h_btn)
    self.helpBtn_MT.clicked.connect(self.helpBtn_MT_clicked)

    # first label
    self.lbl1_MT = QLabel(self.manualTrackingBox)
    self.lbl1_MT.setGeometry(190, 25, 420, 300)
    self.lbl1_MT.setStyleSheet('background-color: white')

    # second label
    self.lbl2_MT = pg.PlotWidget(self.manualTrackingBox)
    self.lbl2_MT.setGeometry(620, 25, 420, 300)
    self.lbl2_MT.setBackground('w')
    self.lbl2_MT.setLabel('left', 'Spread Rate [mm/s]', color='black', size=14)
    self.lbl2_MT.setLabel('bottom', 'Time [s]', color='black', size=14)
    self.lbl2_MT.getAxis('bottom').setPen(color=(0, 0, 0))
    self.lbl2_MT.getAxis('left').setPen(color=(0, 0, 0))

def lumaTrackingBox_Mac(self):
    self.lumaTrackingBox = QGroupBox(' ', self.analysisGroupBox)
    self.lumaTrackingBox.setGeometry(0, 0, 1050, 390)

    #first column
    x_cln1 = 10
    x_cln2 = 120
    w_btn = 150
    h_btn = 30
    h_txt = 30
    h_lbl = 22
    directionBoxTxt = QLabel('Flame direction:', self.lumaTrackingBox)
    directionBoxTxt.setGeometry(x_cln1, 20, 100, h_txt)
    self.directionBox = QComboBox(self.lumaTrackingBox)
    self.directionBox.setGeometry(x_cln1 - 5, 45, 150, h_btn)
    self.directionBox.addItem('Left to right')
    self.directionBox.addItem('Right to left')
    self.directionBox.activated.connect(self.directionLT_clicked)
    thresholdTxt = QLabel('Luma threshold:', self.lumaTrackingBox)
    thresholdTxt.setGeometry(x_cln1, 75, 100, h_txt)
    self.thresholdIn = QLineEdit('30', self.lumaTrackingBox)
    self.thresholdIn.setGeometry(x_cln2, 79, 30, h_lbl)

    filterParticleTxt = QLabel('Filter particles:', self.lumaTrackingBox)
    filterParticleTxt.setGeometry(x_cln1, 100, 150, h_txt)
    self.particleSldrMax = QLineEdit('1000', self.lumaTrackingBox)
    self.particleSldrMax.setGeometry(x_cln2 - 15, 103, 45, h_lbl)
    self.filterParticleSldr_LT = QSlider(Qt.Horizontal, self.lumaTrackingBox)
    self.filterParticleSldr_LT.setGeometry(x_cln1 - 5, 128, 140, 25)
    self.filterParticleSldr_LT.setMinimum(1)
    self.filterParticleSldr_LT.setMaximum(1000)
    self.filterParticleSldr_LT.setValue(10)
    self.filterParticleSldr_LT.sliderReleased.connect(self.filterParticleSldr_LT_released)

    avgLE_txt = QLabel('#px to locate edges:', self.lumaTrackingBox)
    avgLE_txt.setGeometry(x_cln1, 150, 140, h_txt)
    self.avgLEIn_LT = QLineEdit('5', self.lumaTrackingBox)
    self.avgLEIn_LT.setGeometry(x_cln2, 154, 30, h_lbl)
    trackingTxt = QLabel('Flame tracking:', self.lumaTrackingBox)
    trackingTxt.setGeometry(x_cln1, 175, 120, h_txt)
    self.lightROIBtn_LT = QPushButton('Pick bright region', self.lumaTrackingBox)
    self.lightROIBtn_LT.setGeometry(x_cln1 - 5, 195, 150, h_btn)
    self.lightROIBtn_LT.clicked.connect(self.lightROIBtn_LT_clicked)
    self.filterLight = QCheckBox('Ignore flashing light', self.lumaTrackingBox)
    self.filterLight.setGeometry(x_cln1, 220, 140, h_btn)
    movAvgTxt = QLabel('Moving avg points:', self.lumaTrackingBox)
    movAvgTxt.setGeometry(x_cln1, 245, 100, h_txt)
    self.movAvgIn_LT = QLineEdit('2', self.lumaTrackingBox)
    self.movAvgIn_LT.setGeometry(x_cln2, 249, 30, h_lbl)
    self.lumaTrackingBtn = QPushButton('Start Tracking', self.lumaTrackingBox)
    self.lumaTrackingBtn.setGeometry(x_cln1 - 5, 270, w_btn, h_txt)
    self.lumaTrackingBtn.clicked.connect(self.lumaTrackingBtn_clicked)
    self.absValBtn = QPushButton('Absolute values', self.lumaTrackingBox)
    self.absValBtn.setGeometry(x_cln1 - 5, 300, w_btn, h_btn)
    self.absValBtn.clicked.connect(self.absValBtn_LT_clicked)
    self.saveBtn_LT = QPushButton('Save data', self.lumaTrackingBox)
    self.saveBtn_LT.setGeometry(x_cln1 - 5, 330, w_btn, h_btn)
    self.saveBtn_LT.clicked.connect(self.saveDataBtn_LT_clicked)
    self.helpBtn_LT = QPushButton('Help', self.lumaTrackingBox)
    self.helpBtn_LT.setGeometry(x_cln1 - 5, 360, w_btn, h_btn)
    self.helpBtn_LT.clicked.connect(self.helpBtn_LT_clicked)

    self.showEdges = QCheckBox('Show edges location', self.lumaTrackingBox)
    self.showEdges.setGeometry(780, 325, 135, h_btn)
    self.showEdges.setChecked(True)
    self.exportEdges_LT = QCheckBox('Output video analysis', self.lumaTrackingBox)
    self.exportEdges_LT.setGeometry(780, 350, 135, h_btn)
    self.showFrameLargeBtn_LT = QPushButton('Show frames', self.lumaTrackingBox)
    self.showFrameLargeBtn_LT.setGeometry(930, 325, 115, h_btn)
    self.showFrameLargeBtn_LT.clicked.connect(self.showFrameLargeBtn_LT_clicked)

    # below is defined in flameTracker.py already in an OS specific way
    # first label
    self.lbl1_LT = QLabel(self.lumaTrackingBox)
    self.lbl1_LT.setGeometry(190, 25, 420, 300)
    self.lbl1_LT.setStyleSheet('background-color: white')

    # second label
    self.lbl2_LT = QLabel(self.lumaTrackingBox)
    self.lbl2_LT.setGeometry(620, 25, 420, 300)
    self.lbl2_LT.setStyleSheet('background-color: white')

def lumaTrackingBox_Win(self):
    self.lumaTrackingBox = QGroupBox('Analysis box', self.analysisGroupBox)
    self.lumaTrackingBox.setGeometry(0,0, 1050, 370)

    h_btn = 25
    h_txt = 30
    h_lbl = 22
    w_lbl = 35

    #first column
    x_cln1 = 10
    x_cln2 = 115
    directionBoxTxt = QLabel('Flame direction:', self.lumaTrackingBox)
    directionBoxTxt.setGeometry(x_cln1, 15, 140, h_txt)
    self.directionBox = QComboBox(self.lumaTrackingBox)
    self.directionBox.setGeometry(x_cln1, 40, 140, h_btn)
    self.directionBox.addItem('Left to right')
    self.directionBox.addItem('Right to left')
    self.directionBox.activated.connect(self.directionLT_clicked)
    thresholdTxt = QLabel('Luma threshold:', self.lumaTrackingBox)
    thresholdTxt.setGeometry(x_cln1, 70, 80, h_txt)
    self.thresholdIn = QLineEdit('30', self.lumaTrackingBox)
    self.thresholdIn.setGeometry(x_cln2, 75, w_lbl, h_lbl)

    filterParticleTxt = QLabel('Filter particles:', self.lumaTrackingBox)
    filterParticleTxt.setGeometry(x_cln1, 95, 150, h_txt)
    self.particleSldrMax = QLineEdit('1000', self.lumaTrackingBox)
    self.particleSldrMax.setGeometry(x_cln2 - 10, 103, 45, h_lbl) #beta
    self.filterParticleSldr_LT = QSlider(Qt.Horizontal, self.lumaTrackingBox)
    self.filterParticleSldr_LT.setGeometry(x_cln1, 125, 135, 15)
    self.filterParticleSldr_LT.setMinimum(1)
    self.filterParticleSldr_LT.setMaximum(1000)
    self.filterParticleSldr_LT.setValue(10)
    self.filterParticleSldr_LT.sliderReleased.connect(self.filterParticleSldr_LT_released)

    avgLE_txt = QLabel('#px to locate edges:', self.lumaTrackingBox)
    avgLE_txt.setGeometry(x_cln1, 140, 140, h_txt)
    self.avgLEIn_LT = QLineEdit('5', self.lumaTrackingBox)
    self.avgLEIn_LT.setGeometry(x_cln2, 145, w_lbl, h_lbl)
    trackingTxt = QLabel('Flame tracking:', self.lumaTrackingBox)
    trackingTxt.setGeometry(x_cln1, 165, 120, h_txt)
    self.lightROIBtn_LT = QPushButton('Pick bright region', self.lumaTrackingBox)
    self.lightROIBtn_LT.setGeometry(x_cln1, 190, 140, h_btn)
    self.lightROIBtn_LT.clicked.connect(self.lightROIBtn_LT_clicked)
    self.filterLight = QCheckBox('Ignore flashing light', self.lumaTrackingBox)
    self.filterLight.setGeometry(x_cln1, 215, 140, h_btn)
    movAvgTxt = QLabel('Moving avg points:', self.lumaTrackingBox)
    movAvgTxt.setGeometry(x_cln1, 240, 100, h_txt)
    self.movAvgIn_LT = QLineEdit('2', self.lumaTrackingBox)
    self.movAvgIn_LT.setGeometry(x_cln2, 245, w_lbl, h_lbl)
    self.lumaTrackingBtn = QPushButton('Start Tracking', self.lumaTrackingBox)
    self.lumaTrackingBtn.setGeometry(x_cln1, 275, 140, h_btn)
    self.lumaTrackingBtn.clicked.connect(self.lumaTrackingBtn_clicked)
    self.absValBtn = QPushButton('Absolute values', self.lumaTrackingBox)
    self.absValBtn.setGeometry(x_cln1, 305, 140, h_btn)
    self.absValBtn.clicked.connect(self.absValBtn_LT_clicked)
    self.saveBtn_LT = QPushButton('Save data', self.lumaTrackingBox)
    self.saveBtn_LT.setGeometry(x_cln1, 335, 140, h_btn)
    self.saveBtn_LT.clicked.connect(self.saveDataBtn_LT_clicked)

    self.helpBtn_LT = QPushButton('Help', self.lumaTrackingBox)
    self.helpBtn_LT.setGeometry(190, 335, 140, h_btn)
    self.helpBtn_LT.clicked.connect(self.helpBtn_LT_clicked)

    self.showEdges = QCheckBox('Show edges location', self.lumaTrackingBox)
    self.showEdges.setGeometry(750, 320, 140, h_btn)
    self.showEdges.setChecked(True)
    self.exportEdges_LT = QCheckBox('Output video analysis', self.lumaTrackingBox)
    self.exportEdges_LT.setGeometry(750, 340, 140, h_btn)
    self.showFrameLargeBtn_LT = QPushButton('Show frames', self.lumaTrackingBox)
    self.showFrameLargeBtn_LT.setGeometry(920, 325, 120, h_btn)
    self.showFrameLargeBtn_LT.clicked.connect(self.showFrameLargeBtn_LT_clicked)

    # below is defined in flameTracker.py already in an OS specific way
    # first label
    self.lbl1_LT = QLabel(self.lumaTrackingBox)
    self.lbl1_LT.setGeometry(190, 15, 420, 300)
    self.lbl1_LT.setStyleSheet('background-color: white')

    # second label
    self.lbl2_LT = QLabel(self.lumaTrackingBox)
    self.lbl2_LT.setGeometry(620, 15, 420, 300)
    self.lbl2_LT.setStyleSheet('background-color: white')

def colorTrackingBox_Mac(self):
    self.colorTrackingBox = QGroupBox(' ', self.analysisGroupBox)
    self.colorTrackingBox.setGeometry(0, 0, 1050, 390)
    self.colorTrackingBox.setStyleSheet('background-color: None')

    h_btn = 30
    h_txt = 30
    h_lbl = 22
    w_btn2 = 30
    #first column
    x_cln1 = 10
    directionBoxTxt = QLabel('Flame direction:', self.colorTrackingBox)
    directionBoxTxt.setGeometry(x_cln1, 20, 100, h_txt)
    self.directionBox = QComboBox(self.colorTrackingBox)
    self.directionBox.setGeometry(x_cln1 - 5, 45, 150, h_btn)
    self.directionBox.addItem('Left to right')
    self.directionBox.addItem('Right to left')
    self.directionBox.activated.connect(self.directionCT_clicked)
    redChannelTxt = QLabel('Red channel:', self.colorTrackingBox)
    redChannelTxt.setGeometry(x_cln1, 70, 100, h_txt)
    redMinTxt = QLabel('Min:', self.colorTrackingBox)
    redMinTxt.setGeometry(x_cln1, 92, 80, h_txt)
    self.redMinLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.redMinLeftBtn_CT.setGeometry(35, 90, w_btn2, h_btn)
    self.redMinLeftBtn_CT.clicked.connect(self.redMinLeftBtn_CT_clicked)
    self.redMinRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.redMinRightBtn_CT.setGeometry(175, 90, w_btn2, h_btn)
    self.redMinRightBtn_CT.clicked.connect(self.redMinRightBtn_CT_clicked)
    self.redMinSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.redMinSlider.setGeometry(60, 95, 120, 25)
    self.redMinSlider.setMinimum(0)
    self.redMinSlider.setMaximum(255)
    self.redMinSlider.setValue(10)
    self.redMinSlider.sliderReleased.connect(self.singleColorSlider_released)
    redMaxTxt = QLabel('Max:', self.colorTrackingBox)
    redMaxTxt.setGeometry(x_cln1, 114, 100, h_txt)
    self.redMaxLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.redMaxLeftBtn_CT.setGeometry(35, 112, w_btn2, h_btn)
    self.redMaxLeftBtn_CT.clicked.connect(self.redMaxLeftBtn_CT_clicked)
    self.redMaxRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.redMaxRightBtn_CT.setGeometry(175, 112, w_btn2, h_btn)
    self.redMaxRightBtn_CT.clicked.connect(self.redMaxRightBtn_CT_clicked)
    self.redMaxSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.redMaxSlider.setGeometry(60, 117, 120, 25)
    self.redMaxSlider.setMinimum(0)
    self.redMaxSlider.setMaximum(255)
    self.redMaxSlider.setValue(255)
    self.redMaxSlider.sliderReleased.connect(self.singleColorSlider_released)
    greenChannelTxt = QLabel('Green channel:', self.colorTrackingBox)
    greenChannelTxt.setGeometry(x_cln1, 140, 100, h_txt)
    greenMinTxt = QLabel('Min:', self.colorTrackingBox)
    greenMinTxt.setGeometry(x_cln1, 162, 100, h_txt)
    self.greenMinLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.greenMinLeftBtn_CT.setGeometry(35, 160, w_btn2, h_btn)
    self.greenMinLeftBtn_CT.clicked.connect(self.greenMinLeftBtn_CT_clicked)
    self.greenMinRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.greenMinRightBtn_CT.setGeometry(175, 160, w_btn2, h_btn)
    self.greenMinRightBtn_CT.clicked.connect(self.greenMinRightBtn_CT_clicked)
    self.greenMinSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.greenMinSlider.setGeometry(60, 165, 120, 25)
    self.greenMinSlider.setMinimum(0)
    self.greenMinSlider.setMaximum(255)
    self.greenMinSlider.setValue(10)
    self.greenMinSlider.sliderReleased.connect(self.singleColorSlider_released)
    greenMaxTxt = QLabel('Max:', self.colorTrackingBox)
    greenMaxTxt.setGeometry(x_cln1, 184, 100, h_txt)
    self.greenMaxLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.greenMaxLeftBtn_CT.setGeometry(35, 182, w_btn2, h_btn)
    self.greenMaxLeftBtn_CT.clicked.connect(self.greenMaxLeftBtn_CT_clicked)
    self.greenMaxRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.greenMaxRightBtn_CT.setGeometry(175, 182, w_btn2, h_btn)
    self.greenMaxRightBtn_CT.clicked.connect(self.greenMaxRightBtn_CT_clicked)
    self.greenMaxSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.greenMaxSlider.setGeometry(60, 187, 120, 25)
    self.greenMaxSlider.setMinimum(0)
    self.greenMaxSlider.setMaximum(255)
    self.greenMaxSlider.setValue(255)
    self.greenMaxSlider.sliderReleased.connect(self.singleColorSlider_released)
    blueChannelTxt = QLabel('Blue channel:', self.colorTrackingBox)
    blueChannelTxt.setGeometry(x_cln1, 210, 100, h_txt)
    blueMinTxt = QLabel('Min:', self.colorTrackingBox)
    blueMinTxt.setGeometry(x_cln1, 232, 100, h_txt)
    self.blueMinLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.blueMinLeftBtn_CT.setGeometry(35, 230, w_btn2, h_btn)
    self.blueMinLeftBtn_CT.clicked.connect(self.blueMinLeftBtn_CT_clicked)
    self.blueMinRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.blueMinRightBtn_CT.setGeometry(175, 230, w_btn2, h_btn)
    self.blueMinRightBtn_CT.clicked.connect(self.blueMinRightBtn_CT_clicked)
    self.blueMinSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.blueMinSlider.setGeometry(60, 235, 120, 25)
    self.blueMinSlider.setMinimum(0)
    self.blueMinSlider.setMaximum(255)
    self.blueMinSlider.sliderReleased.connect(self.singleColorSlider_released)
    blueMaxTxt = QLabel('Max:', self.colorTrackingBox)
    blueMaxTxt.setGeometry(x_cln1, 254, 100, h_txt)
    self.blueMaxLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.blueMaxLeftBtn_CT.setGeometry(35, 252, w_btn2, h_btn)
    self.blueMaxLeftBtn_CT.clicked.connect(self.blueMaxLeftBtn_CT_clicked)
    self.blueMaxRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.blueMaxRightBtn_CT.setGeometry(175, 252, w_btn2, h_btn)
    self.blueMaxRightBtn_CT.clicked.connect(self.blueMaxRightBtn_CT_clicked)
    self.blueMaxSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.blueMaxSlider.setGeometry(60, 257, 120, 25)
    self.blueMaxSlider.setMinimum(0)
    self.blueMaxSlider.setMaximum(255)
    self.blueMaxSlider.setValue(255)
    self.blueMaxSlider.sliderReleased.connect(self.singleColorSlider_released)

    filterParticleTxt = QLabel('Filter particles:', self.colorTrackingBox)
    filterParticleTxt.setGeometry(x_cln1, 280, 150, h_txt)
    self.particleSldrMax = QLineEdit('1000', self.colorTrackingBox)
    self.particleSldrMax.setGeometry(135, 283, 40, h_lbl)
    self.filterParticleSldr_CT = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.filterParticleSldr_CT.setGeometry(10, 305, 170, 25)
    self.filterParticleSldr_CT.setMinimum(1)
    self.filterParticleSldr_CT.setMaximum(1000)
    self.filterParticleSldr_CT.setValue(10)
    self.filterParticleSldr_CT.sliderReleased.connect(self.filterParticleSldr_CT_released)

    avgLE_txt = QLabel('#px to locate edges:', self.colorTrackingBox)
    avgLE_txt.setGeometry(x_cln1, 330, 140, h_txt)
    self.avgLEIn_CT = QLineEdit('1', self.colorTrackingBox)
    self.avgLEIn_CT.setGeometry(x_cln1 + 135, 334, 30, h_lbl)
    connectivityTxt = QLabel('Connectivity (px):', self.colorTrackingBox)
    connectivityTxt.setGeometry(x_cln1, 360, 100, h_txt)
    self.connectivityBox = QComboBox(self.colorTrackingBox)
    self.connectivityBox.setGeometry(x_cln1 + 110, 360, 60, h_btn)
    self.connectivityBox.addItem('4')
    self.connectivityBox.addItem('8')
    self.connectivityBox.activated.connect(self.connectivityBoxCT_clicked)

    #second column
    x_cln1 = 220
    self.saveChannelsBtn_CT = QPushButton('Save filter values', self.colorTrackingBox)
    self.saveChannelsBtn_CT.setGeometry(x_cln1 - 10, 30, 150, h_btn)
    self.saveChannelsBtn_CT.clicked.connect(self.saveChannelsBtn_CT_clicked)
    self.loadChannelsBtn_CT = QPushButton('Load filter values', self.colorTrackingBox)
    self.loadChannelsBtn_CT.setGeometry(x_cln1 - 10, 60, 150, h_btn)
    self.loadChannelsBtn_CT.clicked.connect(self.loadChannelsBtn_CT_clicked)
    self.helpBtn_CT = QPushButton('Help', self.colorTrackingBox)
    self.helpBtn_CT.setGeometry(x_cln1 - 10, 90, 150, h_btn)
    self.helpBtn_CT.clicked.connect(self.helpBtn_CT_clicked)
    trackingTxt = QLabel('Flame tracking:', self.colorTrackingBox)
    trackingTxt.setGeometry(x_cln1, 120, 120, h_txt)
    self.lightROIBtn_CT = QPushButton('Pick bright region', self.colorTrackingBox)
    self.lightROIBtn_CT.setGeometry(x_cln1 - 10, 145, 150, h_btn)
    self.lightROIBtn_CT.clicked.connect(self.lightROIBtn_CT_clicked)
    self.filterLight_CT = QCheckBox('Ignore flashing light', self.colorTrackingBox)
    self.filterLight_CT.setGeometry(x_cln1, 170, 135, h_btn)
    movAvgTxt = QLabel('Moving avg points:', self.colorTrackingBox)
    movAvgTxt.setGeometry(x_cln1, 200, 130, h_txt)
    self.movAvgIn_CT = QLineEdit('2', self.colorTrackingBox)
    self.movAvgIn_CT.setGeometry(x_cln1 + 105, 204, 30, h_lbl)
    self.colorTrackingBtn = QPushButton('Start tracking', self.colorTrackingBox)
    self.colorTrackingBtn.setGeometry(x_cln1 - 10, 230, 150, h_btn)
    self.colorTrackingBtn.clicked.connect(self.colorTrackingBtn_clicked)
    self.absValBtn_CT = QPushButton('Absolute values', self.colorTrackingBox)
    self.absValBtn_CT.setGeometry(x_cln1 - 10, 260, 150, h_btn)
    self.absValBtn_CT.clicked.connect(self.absValBtn_CT_clicked)
    self.saveBtn_CT = QPushButton('Save data', self.colorTrackingBox)
    self.saveBtn_CT.setGeometry(x_cln1 - 10, 290, 150, h_btn)
    self.saveBtn_CT.clicked.connect(self.saveBtn_CT_clicked)

    # first label
    self.lbl1_CT = QLabel(self.colorTrackingBox)
    self.lbl1_CT.setGeometry(370, 25, 330, 250)
    self.lbl1_CT.setStyleSheet('background-color: white')
    self.showEdges = QCheckBox('Show edges location', self.colorTrackingBox)
    self.showEdges.setGeometry(780, 275, 135, h_btn)
    self.showEdges.setChecked(True)
    self.exportEdges_CT = QCheckBox('Output video analysis', self.colorTrackingBox)
    self.exportEdges_CT.setGeometry(780, 300, 135, h_btn)

    # second label
    self.lbl2_CT = QLabel(self.colorTrackingBox)
    self.lbl2_CT.setGeometry(710, 25, 330, 250)
    self.lbl2_CT.setStyleSheet('background-color: white')
    self.showFrameLargeBtn_CT = QPushButton('Show frames', self.colorTrackingBox)
    self.showFrameLargeBtn_CT.setGeometry(930, 275, 115, h_btn)
    self.showFrameLargeBtn_CT.clicked.connect(self.showFrameLargeBtn_CT_clicked)

def colorTrackingBox_Win(self):
    self.colorTrackingBox = QGroupBox('Analysis box', self.analysisGroupBox)
    self.colorTrackingBox.setGeometry(0, 0, 1050, 370)
    self.colorTrackingBox.setStyleSheet('background-color: None')

    h_btn = 25
    h_btn2 = 15
    h_txt = 30
    h_lbl = 22
    w_btn2 = 15
    #first column
    x_cln1 = 10
    x_cln2 = 120
    directionBoxTxt = QLabel('Flame direction:', self.colorTrackingBox)
    directionBoxTxt.setGeometry(x_cln1, 15, 100, h_txt)
    self.directionBox = QComboBox(self.colorTrackingBox)
    self.directionBox.setGeometry(x_cln1, 40, 140, h_btn)
    self.directionBox.addItem('Left to right')
    self.directionBox.addItem('Right to left')
    self.directionBox.activated.connect(self.directionCT_clicked)
    redChannelTxt = QLabel('Red channel:', self.colorTrackingBox)
    redChannelTxt.setGeometry(x_cln1, 65, 100, h_txt)
    redMinTxt = QLabel('Min:', self.colorTrackingBox)
    redMinTxt.setGeometry(x_cln1, 85, 80, h_txt)
    self.redMinLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.redMinLeftBtn_CT.setGeometry(40, 92, w_btn2, h_btn2)
    self.redMinLeftBtn_CT.clicked.connect(self.redMinLeftBtn_CT_clicked)
    self.redMinRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.redMinRightBtn_CT.setGeometry(185, 92, w_btn2, h_btn2)
    self.redMinRightBtn_CT.clicked.connect(self.redMinRightBtn_CT_clicked)
    self.redMinSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.redMinSlider.setGeometry(60, 92, 120, h_btn2)
    self.redMinSlider.setMinimum(0)
    self.redMinSlider.setMaximum(255)
    self.redMinSlider.setValue(10)
    self.redMinSlider.sliderReleased.connect(self.singleColorSlider_released)
    self.redMinSlider.valueChanged.connect(self.singleColorSlider_released)
    redMaxTxt = QLabel('Max:', self.colorTrackingBox)
    redMaxTxt.setGeometry(x_cln1, 105, 100, h_txt)
    self.redMaxLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.redMaxLeftBtn_CT.setGeometry(40, 112, w_btn2, h_btn2)
    self.redMaxLeftBtn_CT.clicked.connect(self.redMaxLeftBtn_CT_clicked)
    self.redMaxRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.redMaxRightBtn_CT.setGeometry(185, 112, w_btn2, h_btn2)
    self.redMaxRightBtn_CT.clicked.connect(self.redMaxRightBtn_CT_clicked)
    self.redMaxSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.redMaxSlider.setGeometry(60, 112, 120, h_btn2)
    self.redMaxSlider.setMinimum(0)
    self.redMaxSlider.setMaximum(255)
    self.redMaxSlider.setValue(255)
    self.redMaxSlider.sliderReleased.connect(self.singleColorSlider_released)
    self.redMaxSlider.valueChanged.connect(self.singleColorSlider_released)
    greenChannelTxt = QLabel('Green channel:', self.colorTrackingBox)
    greenChannelTxt.setGeometry(x_cln1, 125, 100, h_txt)
    greenMinTxt = QLabel('Min:', self.colorTrackingBox)
    greenMinTxt.setGeometry(x_cln1, 145, 100, h_txt)
    self.greenMinLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.greenMinLeftBtn_CT.setGeometry(40, 152, w_btn2, h_btn2)
    self.greenMinLeftBtn_CT.clicked.connect(self.greenMinLeftBtn_CT_clicked)
    self.greenMinRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.greenMinRightBtn_CT.setGeometry(185, 152, w_btn2, h_btn2)
    self.greenMinRightBtn_CT.clicked.connect(self.greenMinRightBtn_CT_clicked)
    self.greenMinSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.greenMinSlider.setGeometry(60, 152, 120, h_btn2)
    self.greenMinSlider.setMinimum(0)
    self.greenMinSlider.setMaximum(255)
    self.greenMinSlider.setValue(10)
    self.greenMinSlider.sliderReleased.connect(self.singleColorSlider_released)
    self.greenMinSlider.valueChanged.connect(self.singleColorSlider_released)
    greenMaxTxt = QLabel('Max:', self.colorTrackingBox)
    greenMaxTxt.setGeometry(x_cln1, 165, 100, h_txt)
    self.greenMaxLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.greenMaxLeftBtn_CT.setGeometry(40, 172, w_btn2, h_btn2)
    self.greenMaxLeftBtn_CT.clicked.connect(self.greenMaxLeftBtn_CT_clicked)
    self.greenMaxRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.greenMaxRightBtn_CT.setGeometry(185, 172, w_btn2, h_btn2)
    self.greenMaxRightBtn_CT.clicked.connect(self.greenMaxRightBtn_CT_clicked)
    self.greenMaxSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.greenMaxSlider.setGeometry(60, 172, 120, h_btn2)
    self.greenMaxSlider.setMinimum(0)
    self.greenMaxSlider.setMaximum(255)
    self.greenMaxSlider.setValue(255)
    self.greenMaxSlider.sliderReleased.connect(self.singleColorSlider_released)
    self.greenMaxSlider.valueChanged.connect(self.singleColorSlider_released)
    blueChannelTxt = QLabel('Blue channel:', self.colorTrackingBox)
    blueChannelTxt.setGeometry(x_cln1, 185, 100, h_txt)
    blueMinTxt = QLabel('Min:', self.colorTrackingBox)
    blueMinTxt.setGeometry(x_cln1, 205, 100, h_txt)
    self.blueMinLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.blueMinLeftBtn_CT.setGeometry(40, 212, w_btn2, h_btn2)
    self.blueMinLeftBtn_CT.clicked.connect(self.blueMinLeftBtn_CT_clicked)
    self.blueMinRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.blueMinRightBtn_CT.setGeometry(185, 212, w_btn2, h_btn2)
    self.blueMinRightBtn_CT.clicked.connect(self.blueMinRightBtn_CT_clicked)
    self.blueMinSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.blueMinSlider.setGeometry(60, 212, 120, h_btn2)
    self.blueMinSlider.setMinimum(0)
    self.blueMinSlider.setMaximum(255)
    self.blueMinSlider.sliderReleased.connect(self.singleColorSlider_released)
    self.blueMinSlider.valueChanged.connect(self.singleColorSlider_released)
    blueMaxTxt = QLabel('Max:', self.colorTrackingBox)
    blueMaxTxt.setGeometry(x_cln1, 225, 100, h_txt)
    self.blueMaxLeftBtn_CT = QPushButton('<', self.colorTrackingBox)
    self.blueMaxLeftBtn_CT.setGeometry(40, 232, w_btn2, h_btn2)
    self.blueMaxLeftBtn_CT.clicked.connect(self.blueMaxLeftBtn_CT_clicked)
    self.blueMaxRightBtn_CT = QPushButton('>', self.colorTrackingBox)
    self.blueMaxRightBtn_CT.setGeometry(185, 232, w_btn2, h_btn2)
    self.blueMaxRightBtn_CT.clicked.connect(self.blueMaxRightBtn_CT_clicked)
    self.blueMaxSlider = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.blueMaxSlider.setGeometry(60, 232, 120, h_btn2)
    self.blueMaxSlider.setMinimum(0)
    self.blueMaxSlider.setMaximum(255)
    self.blueMaxSlider.setValue(255)
    self.blueMaxSlider.sliderReleased.connect(self.singleColorSlider_released)
    self.blueMaxSlider.valueChanged.connect(self.singleColorSlider_released)

    filterParticleTxt = QLabel('Filter particle:', self.colorTrackingBox)
    filterParticleTxt.setGeometry(x_cln1, 250, 150, h_txt)
    self.particleSldrMax = QLineEdit('1000', self.colorTrackingBox)
    self.particleSldrMax.setGeometry(140, 253, 35, h_lbl)
    self.filterParticleSldr_CT = QSlider(Qt.Horizontal, self.colorTrackingBox)
    self.filterParticleSldr_CT.setGeometry(x_cln1, 275, 170, h_btn2)
    self.filterParticleSldr_CT.setMinimum(1)
    self.filterParticleSldr_CT.setMaximum(1000)
    self.filterParticleSldr_CT.setValue(10)
    self.filterParticleSldr_CT.sliderReleased.connect(self.filterParticleSldr_CT_released)

    avgLE_txt = QLabel('#px to locate edges:', self.colorTrackingBox)
    avgLE_txt.setGeometry(x_cln1, 295, 100, h_txt)
    self.avgLEIn_CT = QLineEdit('1', self.colorTrackingBox)
    self.avgLEIn_CT.setGeometry(x_cln2, 300, 30, h_lbl)
    connectivityTxt = QLabel('Connectivity (px):', self.colorTrackingBox)
    connectivityTxt.setGeometry(x_cln1, 325, 100, h_txt)
    self.connectivityBox = QComboBox(self.colorTrackingBox)
    self.connectivityBox.setGeometry(x_cln2, 330, 35, h_btn-2)
    self.connectivityBox.addItem('4')
    self.connectivityBox.addItem('8')
    self.connectivityBox.activated.connect(self.connectivityBoxCT_clicked)

    #second column
    x_cln1 = 220
    x_cln2 = 330
    self.saveChannelsBtn_CT = QPushButton('Save filter values', self.colorTrackingBox)
    self.saveChannelsBtn_CT.setGeometry(x_cln1, 15, 140, h_btn)
    self.saveChannelsBtn_CT.clicked.connect(self.saveChannelsBtn_CT_clicked)
    self.loadChannelsBtn_CT = QPushButton('Load filter values', self.colorTrackingBox)
    self.loadChannelsBtn_CT.setGeometry(x_cln1, 45, 140, h_btn)
    self.loadChannelsBtn_CT.clicked.connect(self.loadChannelsBtn_CT_clicked)
    self.helpBtn_CT = QPushButton('Help', self.colorTrackingBox)
    self.helpBtn_CT.setGeometry(x_cln1, 75, 140, h_btn)
    self.helpBtn_CT.clicked.connect(self.helpBtn_CT_clicked)
    trackingTxt = QLabel('Flame tracking:', self.colorTrackingBox)
    trackingTxt.setGeometry(x_cln1, 100, 120, h_txt)
    self.lightROIBtn_CT = QPushButton('Pick bright region', self.colorTrackingBox)
    self.lightROIBtn_CT.setGeometry(x_cln1, 130, 140, h_btn)
    self.lightROIBtn_CT.clicked.connect(self.lightROIBtn_CT_clicked)
    self.filterLight_CT = QCheckBox('Ignore flashing light', self.colorTrackingBox)
    self.filterLight_CT.setGeometry(x_cln1, 155, 140, h_btn)
    movAvgTxt = QLabel('Moving avg points:', self.colorTrackingBox)
    movAvgTxt.setGeometry(x_cln1, 185, 100, h_txt)
    self.movAvgIn_CT = QLineEdit('2', self.colorTrackingBox)
    self.movAvgIn_CT.setGeometry(x_cln2, 190, 30, h_lbl)
    self.colorTrackingBtn = QPushButton('Start tracking', self.colorTrackingBox)
    self.colorTrackingBtn.setGeometry(x_cln1, 220, 140, h_btn)
    self.colorTrackingBtn.clicked.connect(self.colorTrackingBtn_clicked)
    self.absValBtn_CT = QPushButton('Absolute values', self.colorTrackingBox)
    self.absValBtn_CT.setGeometry(x_cln1, 250, 140, h_btn)
    self.absValBtn_CT.clicked.connect(self.absValBtn_CT_clicked)
    self.saveBtn_CT = QPushButton('Save data', self.colorTrackingBox)
    self.saveBtn_CT.setGeometry(x_cln1, 280, 140, h_btn)
    self.saveBtn_CT.clicked.connect(self.saveBtn_CT_clicked)

    # first label
    self.lbl1_CT = QLabel(self.colorTrackingBox)
    self.lbl1_CT.setGeometry(370, 15, 330, 250)
    self.lbl1_CT.setStyleSheet('background-color: white')
    self.showEdges = QCheckBox('Show edges location', self.colorTrackingBox)
    self.showEdges.setGeometry(780, 270, 120, h_btn)
    self.showEdges.setChecked(True)
    self.exportEdges_CT = QCheckBox('Output video analysis', self.colorTrackingBox)
    self.exportEdges_CT.setGeometry(780, 290, 120, h_btn)

    # second label
    self.lbl2_CT = QLabel(self.colorTrackingBox)
    self.lbl2_CT.setGeometry(710, 15, 330, 250)
    self.lbl2_CT.setStyleSheet('background-color: white')
    self.showFrameLargeBtn_CT = QPushButton('Show frames', self.colorTrackingBox)
    self.showFrameLargeBtn_CT.setGeometry(920, 270, 120, h_btn)
    self.showFrameLargeBtn_CT.clicked.connect(self.showFrameLargeBtn_CT_clicked)

def HSVTrackingBox_Mac(self):
    print('coming soon...')
